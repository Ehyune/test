"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogOutputChannelTransport = void 0;
const logform_1 = require("logform");
const triple_beam_1 = require("triple-beam");
const winston_transport_1 = __importDefault(require("winston-transport"));
class LogOutputChannelTransport extends winston_transport_1.default {
    outputChannel;
    constructor(opts) {
        super(opts);
        this.outputChannel = opts.outputChannel;
    }
    log(info, next) {
        setImmediate(() => {
            this.emit('logged', info);
        });
        switch (info[triple_beam_1.LEVEL]) {
            case 'error':
                this.outputChannel.error(info[triple_beam_1.MESSAGE]);
                break;
            case 'warning':
            case 'warn':
                this.outputChannel.warn(info[triple_beam_1.MESSAGE]);
                break;
            case 'info':
                this.outputChannel.info(info[triple_beam_1.MESSAGE]);
                break;
            case 'debug':
                this.outputChannel.debug(info[triple_beam_1.MESSAGE]);
                break;
            case 'trace':
                this.outputChannel.trace(info[triple_beam_1.MESSAGE]);
                break;
            default:
                this.outputChannel.appendLine(info[triple_beam_1.MESSAGE]);
                break;
        }
        next();
    }
}
exports.LogOutputChannelTransport = LogOutputChannelTransport;
// Pass empty string for key if this is a root-level object
function stringify(key, val) {
    if (typeof val === 'object' && !Array.isArray(val) && val !== null) {
        // Recursively stringify objects
        const prefix = key === '' ? '' : `${key}.`;
        return Object.entries(val)
            .map(([k, v]) => `${stringify(`${prefix}${k}`, v)}`)
            .join(' ');
    }
    return `${key}=${JSON.stringify(val)}`;
}
const formatFunc = (0, logform_1.format)((info) => {
    const { level, message, ...rest } = info;
    let msg = info[triple_beam_1.MESSAGE] ?? message;
    if (Object.keys(rest).length > 0) {
        msg += ` ${stringify('', rest)}`;
    }
    return {
        ...info,
        [triple_beam_1.LEVEL]: info[triple_beam_1.LEVEL] ?? level,
        [triple_beam_1.MESSAGE]: msg,
    };
});
(function (LogOutputChannelTransport) {
    LogOutputChannelTransport.config = {
        levels: {
            error: 0,
            warn: 1,
            info: 2,
            debug: 3,
            trace: 4,
        },
        colors: {
            error: 'red',
            warn: 'yellow',
            info: 'green',
            debug: 'blue',
            trace: 'grey',
        },
    };
    LogOutputChannelTransport.format = formatFunc;
})(LogOutputChannelTransport || (exports.LogOutputChannelTransport = LogOutputChannelTransport = {}));
//# sourceMappingURL=log-output-channel.js.map